<?php
/*
 *  Repository de l'entité User
 *
 *   Copyright 2017        igor.godi@ac-reims.fr
 *	 DSI4 - Pôle-projets - Rectorat de l'académie de Reims.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

namespace AppBundle\Repository;

use AppBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * Retrouve les utilisateurs en erreur de revalidation charte 
	 */
	public function findErreurDateRevalidationCharte()
	{
		// Création requête
		$qb = $this->createQueryBuilder('a');
		// Clauses Where
		$qb->where('a.etatCompte = :etat')->setParameter('etat', USER::ETAT_COMPTE_REVALIDATION_CHARTE) 	// etatCompte = 'revalidation_charte'
		   ->andWhere($qb->expr()->isNull('a.dateMaxiRevalidationCharte'))					// dateMaxiRevalidationCharte = null
		   ->orderBy('a.username', 'ASC')
		;
		// Retourne le resultat
		return $qb->getQuery()->getResult();
	}

	/**
	 * Retrouve les utilisateurs inactif ou en attente de modération 
	 */
	public function findUsersInactifOuAttente()
	{
		// Création requête
		$qb = $this->createQueryBuilder('a');
		// Clauses Where
		$qb->where('a.etatCompte = :etat')->setParameter('etat', USER::ETAT_COMPTE_INACTIF)	 		// etatCompte = 'inactif'
		   ->orWhere('a.etatCompte = :etat2')->setParameter('etat2', USER::ETAT_COMPTE_MODERATION) 		// etatCompte = 'moderation'
		;
		// Retourne le resultat
		return $qb->getQuery()->getResult();
	}

	/**
	 * Retrouve les utilisateurs en attente de revalidation dépassée 
	 */
	public function findDateRevalidationChartePassee()
	{
		// Création requête
		$qb = $this->createQueryBuilder('a');
		// Clauses Where
		$qb->where('a.etatCompte = :etat')->setParameter('etat', USER::ETAT_COMPTE_REVALIDATION_CHARTE) 	// etatCompte = 'revalidation_charte'
		   ->andWhere('a.dateMaxiRevalidationCharte < :now')->setParameter('now', new \DateTime('now'))		// dateMaxiRevalidationCharte < now()
		   ->orderBy('a.username', 'ASC');
		// Retourne le resultat
		return $qb->getQuery()->getResult();
	}




}
