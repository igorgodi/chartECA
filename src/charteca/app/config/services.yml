# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    ########################### Services ayant un fort taux de réutilisabilité ################################################################
    # Service reader LDAP (on utilise ici le compte Writer lais on pourrait aussi avoir un compte de consultation)
    app.reader_ldap:
        class: AppBundle\Service\LdapReader
        public: true
        arguments: ['@logger', '%ldapHost%', '%ldapPort%', '%ldapWriterDn%', '%ldapWriterPw%', '%ldapRacine%']

    # Service writer LDAP
    app.writer_ldap:
        class: AppBundle\Service\LdapWriter
        public: true
        arguments: ['@logger', '%ldapHost%', '%ldapPort%', '%ldapWriterDn%', '%ldapWriterPw%', '%ldapRacine%']

    # Service client SOAP chargé de communiquer avec l'application ECA
    app.webservice_eca:
        class:  AppBundle\Service\ClientSoap
        public: true
        arguments: ['@logger', '%adresse_eca%/%ws_eca_chemin%', '%ws_eca_token%']

    ### Gestion de la gestion des habilitations de l'application
    # Evenement chargé de gérer le la collecte des attributs RSA et la création de l'utilisateur dans l'application si il n'existe pas
    app.service_rsa:
        class: AppBundle\EventListener\RsaAttributs
        public: true
        arguments: ['@logger', '@request_stack', '@doctrine.orm.entity_manager']
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: loadUser, priority: 12 }

    # Service chargé de la sécurité (firewall Symfony) s'appuyant sur la collecte des attibuts RSA
    rsa_authenticator:
        class: AppBundle\Security\RsaAuthenticator
        arguments: ["@app.service_rsa"]

    ########################### Services ayant un faible taux de réutilisabilité ##############################################################
    ### Services nécessaires à la partie métier de l'application
    # Service chargé de gérer les enregistrements dans le journal des actions des comptes utilisateurs ECA
    app.journal_actions:
        class: AppBundle\Service\JournalActions
        public: true
        arguments: [ '@logger', '@doctrine.orm.entity_manager']

    # Service chargé des notifications (utilisateurs et moderateurs) sur les actions des comptes utilisateurs ECA
    app.notification.mail:
        class: AppBundle\Service\Notifications
        public: true
        arguments: [ '@logger', '@doctrine.orm.entity_manager', '@app.journal_actions', '@mailer', '@templating', '%notification_from%']

